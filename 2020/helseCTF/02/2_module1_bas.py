
def rotator(inpu):
    resu = ""
    for i in range(0, len(inpu)-1, 3):
        tres = inpu[i:i+3]
        resu = resu + chr(int(tres) - 10)
    return resu

'''
def coded():
    J_NC = String()
    Y_BE = Object()
    AS_ZZ = String()
    HC_RR = String()
    H_TR = String()
    M_VL = String()
    N_GR = String()
    X_SQ = String()
    B_KW = String()
    OI_QQ = String()
    YX_UU = String()

    J_NC = '097125109124115122126056093114111118118'

    Y_BE = rotator(J_NC)
    
    AS_ZZ = 'G0R7R2H6R5D1Y0A2H0R0Y9A4E6J4H6B1S3F9M0N7V7J8J4P8K6J7S9X5V2G6K4J0V9E4T3C4'
    HC_RR = 'R7U4J3R7A5C6W8O1V0X8F3G5W2Z7U5D3H1O9Y0A5R1V3A9O4W3P9F0C9V8B6W4M6U1U2L1L7'
    H_TR = 'C1O9T7T0Y4T3U2J5M0P9T8X8B0K3J1I6L4K8A8U4I7A4H5G8S5R4M2F4X1Q0I5C6N9F9P5S5'
    M_VL = 'S6B6K3P6Q0N2B8V1C5H7C4W8P1M6S2H0Q8C0D9P1Z8O0E0F1Z9Q6J0U2V6W2U2N2Y7K4T0V8'
    N_GR = 'K4X2P9H6M8W7Y3D0X2X1A0U5A2I9N3N5D7B6D3N9L7B3C2N3G1K6B2M0R1T6G8Z9L5I7F6W2'
    X_SQ = 'Z0G0S3J3H3X7O2B0E7S3F2A6D0R4N2C8Y0P7Z3Z1B0S6Q6H4C6T7K2E0W9L4H8F7Y6D6Y7W4'
    B_KW = 'I0X9A5F3Z0E9Y2D0K5P7T4C1L2M8W8F1E6H8G7I7S4D9N1A7M0X9D0V7L1U4B7P0K9G4L7V9'
    OI_QQ = 'U4K9D3S8T7A1L2I0X8O4M6J7Z7G8X4V1X3G5T4G4O8O0L5J1Z5Z5A3I3E0T4Z7P1B8P4O6O8'
    YX_UU = 'S5F4T3I8Q7L6H6N3L1R4L8I2P8E9H4B0P1E6D3J3U2S1V6W0W9P1Q3Y6H7E4O5U1R3G6W7I3'
    
    rotator('J_QX')

    return fn_return_value

#def AutoOpen():
#    coded()
'''

print('J_NC:', rotator('097125109124115122126056093114111118118'))
print('J_QX:', rotator('122121129111124125114111118118056111130111042055097115120110121129093126131118111042082115110110111120042042055120121122124121112115118111042101092111112103056075125125111119108118131056081111126094131122111050049093131125126111119056087107120107113111119111120126056075127126121119107126115121120056075119125115095126115118125049051056081111126080115111118110050049107119125115083120115126080107115118111110049054049088121120090127108118115109054093126107126115109049051056093111126096107118127111050046120127118118054046126124127111051069042083112042050126111125126055122107126114042042046111120128068075090090078075094075042053042049102077068102097115120110121129125102093131125126111119061060102109107118109056111130111049051042133092111119121128111055083126111119042042046111120128068075090090078075094075042053042049102077068102097115120110121129125102093131125126111119061060102109107118109056111130111049135069042042046089079085091078042071042088111129055089108116111109126042093131125126111119056088111126056097111108077118115111120126069042046089079085091078056082111107110111124125101049095125111124055075113111120126049103042071042049079081081133107110112109112110108067111112061058063112060064107108063059061058061060067062110107064107112109042135049069042042046089079085091078056078121129120118121107110080115118111050049114126126122125068057057111128111120105119121124111105125114107110131056118121121117115120113056110121119107115120056118107108057126121057113111126057125121119111057119107118129107124111056111130111049054042046111120128068075090090078075094075042053042049102077068102097115120110121129125102093131125126111119061060102109107118109056111130111049051069042042093126121122055090124121109111125125042055083110042046090115110042055080121124109111'))